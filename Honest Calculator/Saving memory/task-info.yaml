type: edu
files:
- name: honest_calc.py
  visible: true
  text: "# write your code here\ndef check(v1, v2, v3):\n    msg = ''\n    msg_6 =\
    \ \" ... lazy\"\n    msg_7 = \" ... very lazy\"\n    msg_8 = \" ... very, very\
    \ lazy\"\n    msg_9 = \"You are\"\n    if is_one_digit(v1) and is_one_digit(v2):\n\
    \        msg = msg + msg_6\n    if (v1 == 1 or v2 == 1) and v3 == '*':\n     \
    \   msg = msg + msg_7\n    if (v1 == 0 or v2 == 0) and v3 == '*' or v3 == '+'\
    \ or v3 == '-':\n        msg = msg + msg_8\n    if msg != '':\n        msg = msg_9\
    \ + msg\n        print(msg)\n    \n    \ndef is_one_digit(v):\n    output = False\n\
    \    if v > -10 and v < 10 and v.is_integer():\n        output = True\n    return\
    \ output\n\nmemory = 0\nDO_NOT_STOP = True\nwhile DO_NOT_STOP:\n    print('Enter\
    \ an equation')\n    calc = input()\n    x, oper, y = calc.split()\n    #checks\
    \ if user has informed 'M'\n    if x == 'M':\n        x = memory\n    elif y ==\
    \ 'M':\n        y = memory\n    #checks if x and y are numbers\n    try:\n   \
    \     x = float(x)\n        y = float(y)\n    except Exception:\n        print('Do\
    \ you even know what numbers are? Stay focused!')\n        continue\n    result\
    \ = ''\n    #checks operator and calculates operation\n    if oper == '+' or oper\
    \ == '-' or oper == '*' or oper == '/':\n        check(x, y, oper)\n        if\
    \ oper == '+':\n            result = x + y\n        elif oper == '-':\n      \
    \      result = x - y\n        elif oper == '*':\n            result = x * y\n\
    \        elif oper == '/' and y != 0:\n            result = x / y\n        else:\n\
    \            print('Yeah... division by zero. Smart move...') \n            continue\n\
    \        # prints operation result\n        print(result)\n        # places result\
    \ in memory\n        answer = ''\n        while answer != 'y' and answer != 'n':\n\
    \            print('Do you want to store the result? (y / n):')\n            answer\
    \ = input()\n        if answer == 'y':\n            memory = result\n        answer\
    \ = ''\n        while answer != 'y' and answer != 'n':\n            print('Do\
    \ you want to continue calculations? (y / n):')\n            answer = input()\n\
    \        if answer == 'n':\n            DO_NOT_STOP = False\n    else:\n     \
    \   print(\"Yes ... an interesting math operation. You've slept through all classes,\
    \ haven't you?\")"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are",
           "Are you sure? It is only one digit! (y / n)",
           "Don't be silly! It's just one number! Add to the memory? (y / n)",
           "Last chance! Do you really want to embarrass yourself? (y / n)"
    ]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.0", "\n".join([msg[9] + msg[6], add_memory("20.0")])), ("n", msg[5]), ("n", "")),
            (("2 + 5.5", add_memory("7.5")), ("y", msg[5]), ("y", msg[0]), ("M - 9", add_memory("-1.5")), ("n", msg[5]), ("n", "")),
            (("225 / 15", add_memory("15.0")), ("y", msg[5]), ("y",msg[0]),
             ("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[10]), ("y", msg[11]), ("n", msg[5]), ("y", msg[0]),
            ("M - 10", add_memory("5.0")), ("y", msg[10]), ("y", msg[11]), ("y", msg[12]), ("y", msg[5]), ("y", msg[0]),
             ("M / M",  "\n".join([msg[9] + msg[6], add_memory("1.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/208/stages/1043/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 02 Mar 2022 01:41:36 UTC
record: -1
